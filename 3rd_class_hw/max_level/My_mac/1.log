 uname -m
    2  rm -f /usr/local/bin/kubelet /usr/local/bin/kubectl || true
    3  VER=$(curl -sSL https://dl.k8s.io/release/stable.txt)
    4  apt-get update && apt-get install -y containerd curl socat ca-certificates
    5  VER=$(curl -sSL https://dl.k8s.io/release/stable.txt)
    6  curl -LO https://dl.k8s.io/release/${VER}/bin/linux/arm64/kubelet
    7  curl -LO https://dl.k8s.io/release/${VER}/bin/linux/arm64/kubectl
    8  install -m 0755 kubelet /usr/local/bin/kubelet
    9  install -m 0755 kubectl /usr/local/bin/kubectl
   10  apt-get update && apt-get install -y containerd
   11  mkdir -p /etc/containerd
   12  containerd config default >/etc/containerd/config.toml
   13  nohup containerd >/var/log/containerd.log 2>&1 &
   14  mkdir -p /var/lib/kubelet
   15  cat >/var/lib/kubelet/config.yaml <<'YAML'
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
clusterDNS: ["10.0.0.10"]
clusterDomain: "cluster.local"
maxPods: 30
YAML

   16  apt-get update && apt-get install -y socat
   17  nohup socat TCP-LISTEN:6443,bind=127.0.0.1,fork,reuseaddr TCP:host.docker.internal:6443 >/var/log/socat-6443.log 2>&1 &
   18  curl -sk https://localhost:6443/healthz
   19  API="https://localhost:6443"
   20  NEW_TOKEN="0f6ea4.ad56ab4dfda67f3d"
   21  kubectl config set-cluster test-env   --server="${API}"   --certificate-authority=/var/lib/kubelet/ca.crt   --embed-certs=true   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   22  vi /var/lib/kubelet/ca.crt
   23  apt-get install vim
   24  vi /var/lib/kubelet/ca.crt
   25  kubectl config set-cluster test-env   --server="${API}"   --certificate-authority=/var/lib/kubelet/ca.crt   --embed-certs=true   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   26  kubectl config set-credentials kubelet-bootstrap   --token="${NEW_TOKEN}"   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   27  kubectl config set-context default --cluster=test-env --user=kubelet-bootstrap   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   28  kubectl config use-context default --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   29  kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2
   30  cat /var/lib/kubelet/ca.crt 
   31  url -sk -H "Authorization: Bearer ${NEW_TOKEN}" ${API}/version --cacert /var/lib/kubelet/ca.crt
   32  curl -sk -H "Authorization: Bearer ${NEW_TOKEN}" ${API}/version --cacert /var/lib/kubelet/ca.crt
   33  echo $NEW_TOCKEN
   34  echo $NEW_TOKEN
   35  API="https://localhost:6443"
   36  NEW_TOKEN="0f6ea4.ad56ab4dfda67f3d"
   37  curl -sk -H "Authorization: Bearer ${NEW_TOKEN}"      --cacert /var/lib/kubelet/ca.crt      ${API}/version
   38  openssl s_client -connect 127.0.0.1:6443 -showcerts </dev/null 2>/dev/null | openssl x509 -noout -text | head -n 20
   39  openssl x509 -in /var/lib/kubelet/ca.crt -noout -text | head -n 20
   40  cat /var/lib/kubelet/ca.crt 
   41  kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2
   42  openssl s_client -connect 127.0.0.1:6443 -showcerts </dev/null 2>/dev/null  | awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/'  > /var/lib/kubelet/ca.crt
   43  cat /var/lib/kubelet/ca.crt 
   44  openssl s_client -connect 127.0.0.1:6443 -showcerts </dev/null 2>/dev/null | openssl x509 -noout -text | head -n 20
   45  openssl x509 -in /var/lib/kubelet/ca.crt -noout -text | head -n 20
   46  kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2
   47  kubectl config set-cluster test-env   --server="${API}"   --certificate-authority=/var/lib/kubelet/ca.crt   --embed-certs=true   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   48  kubectl config set-credentials kubelet-bootstrap   --token="${NEW_TOKEN}"   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   49  kubectl config set-context default --cluster=test-env --user=kubelet-bootstrap   --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   50  kubectl config use-context default --kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig
   51  kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2
   52  vi /var/lib/kubelet/config.yaml 
   53  kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2
   54  grep -n 'SystemdCgroup' /etc/containerd/config.toml || true
   55  vi /var/lib/kubelet/config.yaml 
   56  kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2
   57  ps aux | grep kubel
   58  pkill kubelet || true
   59  nohup kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --pod-infra-container-image=registry.k8s.io/pause:3.10   --hostname-override=mac-node   --v=2 >/var/log/kubelet.log 2>&1 &
   60  tail -f /var/log/kubelet.log 
   61  less /var/log/kubelet.log 
   62  vi /var/log/kubelet.log 
   63  ARCH=$(uname -m); case "$ARCH" in x86_64) ARCH=amd64;; aarch64) ARCH=arm64;; esac
   64  kubectl get node mac-node -o jsonpath='{range .status.conditions[*]}{.type}={.status} {.message}{"\n"}{end}'
   65  CNI_VER=v1.5.1
   66  mkdir -p /opt/cni/bin /etc/cni/net.d
   67  curl -L -o /tmp/cni.tgz https://github.com/containernetworking/plugins/releases/download/${CNI_VER}/cni-plugins-linux-${ARCH}-${CNI_VER}.tgz
   68  tar -C /opt/cni/bin -xzf /tmp/cni.tgz
   69  cat >/etc/cni/net.d/10-bridge.conf <<'EOF'
{
  "cniVersion": "1.0.0",
  "name": "bridge",
  "type": "bridge",
  "bridge": "cni0",
  "isGateway": true,
  "ipMasq": true,
  "promiscMode": true,
  "ipam": {
    "type": "host-local",
    "routes": [{"dst": "0.0.0.0/0"}],
    "ranges": [[{ "subnet": "10.244.0.0/16" }]]
  }
}
EOF

   70  cat >/etc/cni/net.d/99-loopback.conf <<'EOF'
{
  "cniVersion": "1.0.0",
  "name": "lo",
  "type": "loopback"
}
EOF

   71  sysctl -w net.ipv4.ip_forward=1
   72  sysctl -w net.bridge.bridge-nf-call-iptables=1 2>/dev/null || true
   73  pkill -9 kubelet || true
   74  nohup kubelet   --bootstrap-kubeconfig=/var/lib/kubelet/bootstrap-kubeconfig   --kubeconfig=/var/lib/kubelet/kubeconfig   --cert-dir=/var/lib/kubelet/pki   --config=/var/lib/kubelet/config.yaml   --container-runtime-endpoint=unix:///run/containerd/containerd.sock   --hostname-override=mac-node   --cgroup-driver=cgroupfs   --v=2 >/var/log/kubelet.log 2>&1 &



Після цього

@zemiel1980 ➜ /workspaces/kubernetes (main) $ sudo kubectl get node
NAME                STATUS     ROLES    AGE    VERSION
codespaces-1f25ba   Ready      master   5d6h   v1.30.0
mac-node            NotReady   <none>   18m    v1.34.1
@zemiel1980 ➜ /workspaces/kubernetes (main) $ sudo kubectl get node
NAME                STATUS   ROLES    AGE    VERSION
codespaces-1f25ba   Ready    master   5d7h   v1.30.0
mac-node            Ready    <none>   21m    v1.34.1